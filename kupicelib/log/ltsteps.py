#!/usr/bin/env python

# -------------------------------------------------------------------------------
#
#  ███████╗██████╗ ██╗ ██████╗███████╗██╗     ██╗██████╗
#  ██╔════╝██╔══██╗██║██╔════╝██╔════╝██║     ██║██╔══██╗
#  ███████╗██████╔╝██║██║     █████╗  ██║     ██║██████╔╝
#  ╚════██║██╔═══╝ ██║██║     ██╔══╝  ██║     ██║██╔══██╗
#  ███████║██║     ██║╚██████╗███████╗███████╗██║██████╔╝
#  ╚══════╝╚═╝     ╚═╝ ╚═════╝╚══════╝╚══════╝╚═╝╚═════╝
#
# Name:        ltsteps.py
# Purpose:     Process LTSpice output files and align data for spreadsheet tools
#              such as Excel or Calc.
#
# Author:      Nuno Brum (nuno.brum@gmail.com)
#
# Licence:     refer to the LICENSE file
# -------------------------------------------------------------------------------

"""This module allows to process data generated by LTSpice during simulation. There are
three types of files that are handled by this module.

+ log files - Files with the extension '.log' that are automatically generated during
simulation, and that are   normally accessible with the shortcut Ctrl+L after a
simulation is ran.Log files are interesting for two reasons.

1. If .STEP primitives are used, the log file contain the correspondence between the
step run and the step value configuration.

2. If .MEAS primitives are used in the schematic, the log file contains the measurements
made on the output data.

ltsteps.py can be used to retrieve both step and measurement information from log files.

+ txt files - Files exported from the Plot File -> Export data as text menu. This file
is an text file where data is   saved in the text format. The reason to use kupicelib
instead of another popular lib as pandas, is because the data   format when .STEPS are
used in the simulation is not not very practical. The kupicelib ltsteps.py can be used
to   reformat the text, so that the run parameter is added to the data as an additional
column instead of a table   divider. Please Check LTSpiceExport class for more
information.

+ mout files - Files generated by the Plot File -> Execute .MEAS Script menu. This
command allows the user to run   predefined .MEAS commands which create a .mout file. A
.mout file has the measurement information stored in the   following format:

.. code-block:: text

Measurement: Vout_rms step        RMS(V(OUT))     FROM    TO  1  1.41109 0       0.001 2
1.40729 0       0.001

Measurement: Vin_rms   step      RMS(V(IN))      FROM    TO      1      0.706221 0
0.001      2      0.704738        0       0.001

Measurement: gain   step      Vout_rms/Vin_rms      1      1.99809      2      1.99689

 The ltsteps can be used directly from a command line if the Python's Scripts folder is
included in the PATH environment variable.

.. code-block:: text

$ ltsteps <path_to_filename>

If `<path_to_filename>` is a log file, it will create a file with the same name, but
with extension .tout that is a tab separated value (tsv) file, which contains the .STEP
and .MEAS information collected.

If `<path_to_filename>` is a txt exported file, it will create a file with the same
name, but with extension .tsv a tab separated value (tsv) file, which contains data
reformatted with the step number as one of the columns. Please consult the
reformat_LTSpice_export() function for more information.

If `<path_to_filename>` is a mout file, it will create a file with the same name, but
with extension .tmout that is a tab separated value (tsv) file, which contains the .MEAS
information collected, but adding the STEP run information as one of the columns.

If `<path_to_filename>` argument is ommited, the script will automatically search for
the newest .log/.txt/.mout file and use it.
"""
from __future__ import annotations

import dataclasses
import logging
import os.path
import re
from collections.abc import Iterator
from pathlib import Path
from typing import Any, TypeVar, cast

from ..utils.detect_encoding import detect_encoding
from .logfile_data import ConvertibleValue, LogfileData, ValueType, try_convert_value

__author__ = "Nuno Canto Brum <me@nunobrum.com>"
__copyright__ = "Copyright 2023, Fribourg Switzerland"

_logger = logging.getLogger("kupicelib.LTSteps")

T = TypeVar("T")


def reformat_LTSpice_export(export_file: str, tabular_file: str) -> None:
    """Reads an LTSpice File Export file and writes it back in a format that is more
    convenient for data treatment.

    When using the "Export data as text" in the raw file menu the data is already
    exported in a tabular format. However, if steps are being used, the step information
    doesn't appear on the table.  Instead the successive STEP runs are stacked on one
    after another, separated by the following text:

    .. code-block:: text

    Step Information: Ton=400m  (Run: 2/2)

    What would be desirable would be that the step number (Run number) and the STEP
    variable would be placed within the columns.  This allows, for example, using Excel
    functionality known as Pivot Tables to filter out data, or some other database
    selection function. The tab is chosen as separator because it is normally compatible
    with pasting data into Excel.

    :param export_file: Filename of the .txt file generated by the "Export Data as Text"
    :type export_file: str
    :param tabular_file: Filename of the tab separated values (TSV) file that
    :type tabular_file: str
    :return: Nothing
    """
    encoding = detect_encoding(export_file)
    with open(export_file, encoding=encoding) as fin, open(
        tabular_file, "w", encoding=encoding
    ) as fout:
        headers = fin.readline()
        # writing header
        go_header = True
        run_no = "0"  # Regex returns strings, so cache the value as str
        param_values = ""
        regx = re.compile(
            r"Step Information: ([\w=\d\. \-]+) +\((?:Run|Step): (\d*)/\d*\)\n"
        )
        for line in fin:
            if line.startswith("Step Information:"):
                match = regx.match(line)
                if match is None:
                    _logger.debug("Could not parse step information line: %s", line)
                    continue

                step, run_no = match.groups()
                params: list[str] = [param.split("=")[1] for param in step.split()]
                param_values = "\t".join(params)

                if go_header:
                    header_keys = [param.split("=")[0] for param in step.split()]
                    param_header = "\t".join(header_keys)
                    msg = f"Run\t{param_header}\t{headers}"
                    fout.write(msg)
                    _logger.debug(msg)
                    go_header = False
                continue

            fout.write(f"{run_no}\t{param_values}\t{line}")


class LTSpiceExport:
    """Opens and reads LTSpice export data when using the "Export data as text" in the
    File Menu on the waveform window.

    The data is then accessible by using the following attributes implemented in this
    class.

    :property headers: list containing the headers on the exported data :property
    dataset: dictionary in which the keys are the the headers and the export file and
    the values are     lists. When reading STEPed data, a new key called 'runno' is
    added to the dataset.

    **Examples**

    ::

    export_data = LTSpiceExport("export_data_file.txt") for value in
    export_data.dataset['i(v1)']:     print(f"Do something with this value {value}")

    :param export_filename: path to the Export file.
    :type export_filename: str
    """

    def __init__(self, export_filename: str):
        self.encoding = detect_encoding(export_filename)
        with open(export_filename, encoding=self.encoding) as fin:
            file_header = fin.readline()

            self.headers: list[str] = file_header.strip("\r\n").split("\t")
            # Set to read header
            go_header = True

            curr_dic: dict[str, ValueType] = {}
            self.dataset: dict[str, list[ValueType]] = {}

            regx = re.compile(r"Step Information: ([\w=\d\. -]+) +\(Run: (\d*)/\d*\)\n")
            for line in fin:
                if line.startswith("Step Information:"):
                    match = regx.match(line)
                    if match:
                        step, run_no = match.groups()
                        curr_dic["runno"] = run_no
                        for param in step.split():
                            key, value = param.split("=")
                            curr_dic[key] = try_convert_value(value)

                        if go_header:
                            go_header = False  # This is executed only once
                            for key in self.headers:
                                self.dataset[key.lower()] = []

                            for key in curr_dic:
                                self.dataset[key.lower()] = []

                else:
                    values = line.strip("\r\n").split("\t")

                    for key, value in curr_dic.items():
                        self.dataset[key.lower()].append(value)

                    for index, header in enumerate(self.headers):
                        if index >= len(values):
                            break
                        self.dataset[header.lower()].append(
                            try_convert_value(values[index])
                        )


@dataclasses.dataclass
class HarmonicData:
    harmonic_number: int
    frequency: float
    fourier_component: float
    normalized_component: float
    phase: float
    normalized_phase: float
    # units: dict = dataclasses.field(default_factory=dict)

    @classmethod
    def from_line(cls, line: str) -> HarmonicData:
        tokens = line.split()
        harmonic_number = int(tokens[0])
        frequency = float(tokens[1])
        fourier_component = float(tokens[2])
        normalized_component = float(tokens[3])
        phase = float(tokens[4].rstrip("°"))
        normalized_phase = float(tokens[5].rstrip("°"))
        return cls(
            harmonic_number,
            frequency,
            fourier_component,
            normalized_component,
            phase,
            normalized_phase,
        )


@dataclasses.dataclass
class FourierData:
    signal: str
    n_periods: int
    dc_component: float
    phd: float  # Partial Harmonic Distortion
    thd: float  # Total Harmonic Distortion
    harmonics: list[HarmonicData]
    step: int

    @property
    def fundamental(self) -> float:
        return self.harmonics[0].frequency

    def __getitem__(self, item: int) -> HarmonicData:
        return self.harmonics[item]

    def __iter__(self) -> Iterator[HarmonicData]:
        return iter(self.harmonics)

    def __len__(self) -> int:
        return len(self.harmonics)


class LTSpiceLogReader(LogfileData):
    """Reads an LTSpice log file and retrieves the step information if it exists. The
    step information is then accessible by using the 'stepset' property of this class.
    This class is intended to be used together with the RawRead to retrieve the runs
    that are associated with a given parameter setting.

    This class constructor only reads the step information of the log file. If the
    measures are needed, then the user should call the get_measures() method.

    :property stepset: dictionary in which the keys are the variables that were STEP'ed
    during the simulation and     the associated value is a list representing the
    sequence of assigned values during simulation.

    :property headers: list containing the headers on the exported data. This is only
    populated when the *read_measures*     optional parameter is set to False.

    :property dataset: dictionary in which the keys are the headers and the export file
    and the values are      lists. This is information is only populated when the
    *read_measures* optional parameter is set to False.

    :param log_filename: path to the Export file.
    :type log_filename: str
    :param read_measures: Optional parameter to skip measuring data reading.
    :type read_measures: boolean
    :param step_set: Optional parameter to provide the steps from another file. This is
        used to process .mout files.
    :type step_set: dict
    """

    def __init__(
        self,
        log_filename: str,
        read_measures: bool = True,
        step_set: dict[str, list[Any]] | None = None,
        encoding: str | None = None,
    ):
        super().__init__(step_set)
        self.logname = log_filename
        self.fourier: dict[str, list[FourierData]] = {}
        if encoding is None:
            self.encoding = detect_encoding(
                log_filename, r"^((.*\n)?Circuit:|([\s\S]*)--- Expanded Netlist ---)"
            )
        else:
            self.encoding = encoding

        # Preparing a stepless measurement read regular expression
        # there are only measures taken in the format parameter: measurement
        # A few examples of readings
        # vout_rms: RMS(v(out))=1.41109 FROM 0 TO 0.001  => Interval
        # vin_rms: RMS(v(in))=0.70622 FROM 0 TO 0.001  => Interval
        # gain: vout_rms/vin_rms=1.99809 => Parameter
        # vout1m: v(out)=-0.0186257 at 0.001 => Point
        # fcut: v(vout)=vmax/sqrt(2) AT 252.921
        # fcutac=8.18166e+006 FROM 1.81834e+006 TO 1e+007 => AC Find Computation
        regx = re.compile(
            # r"^(?P<name>\w+)(:\s+.*)?=(?P<value>[\d(inf)\.E+\-\(\)dB,°]+)"
            # r"(( FROM (?P<from>[\d\.E+-]*) TO (?P<to>[\d\.E+-]*))"
            # r"|( at (?P<at>[\d\.E+-]*)))?",
            r"^(?P<name>\w+)(:\s+.*)?="
            r"(?P<value>[\d(inf)E+\-\(\)dB,°(-/\w]+)"
            r"( FROM (?P<from>[\d\.E+-]*) TO (?P<to>[\d\.E+-]*)"
            r"|( at (?P<at>[\d\.E+-]*)))?",
            re.IGNORECASE,
        )

        _logger.debug(f"Processing LOG file:{log_filename}")
        with open(log_filename, encoding=self.encoding) as fin:
            line = fin.readline()
            # init variables, just in case. Not needed really, but helps debugging
            signal: str | None = None
            n_periods: int | float = 0
            dc_component: float = 0.0

            while line:
                if len(line.strip()) == 0:
                    # skip empty lines
                    pass
                elif line.startswith("N-Period"):
                    # Read number of periods
                    n_periods_str = line.strip("\r\n").split("=")[-1].strip()
                    n_periods = (
                        -1 if n_periods_str == "all" else float(n_periods_str)
                    )
                elif line.startswith("Fourier components of"):
                    # Read signal name
                    line = line.strip("\r\n")
                    signal = line.split(" of ")[-1].strip()
                elif line.startswith("DC component:"):
                    # Read DC component
                    line = line.strip("\r\n")
                    dc_component = float(line.split(":")[-1].strip())
                elif line.startswith("Harmonic"):
                    # Skip next header line
                    fin.readline()
                    # Read Harmonics table
                    phd: float | None = None
                    thd: float | None = None
                    harmonics: list[HarmonicData] = []
                    while True:
                        line = fin.readline().strip("\r\n")
                        if line.startswith("Total Harmonic"):
                            # Find THD
                            match = re.search(r"\d+.\d+", line)
                            if match:  # Check if match exists
                                thd = float(match.group())
                        elif line.startswith("Partial Harmonic"):
                            # Find PHD
                            match = re.search(r"\d+.\d+", line)
                            if match:  # Check if match exists
                                phd = float(match.group())
                        elif line == "":
                            # End of the table
                            break
                        else:
                            harmonics.append(HarmonicData.from_line(line))

                    if signal is not None and phd is not None and thd is not None:
                        fourier_data = FourierData(
                            signal,
                            (
                                int(n_periods)
                                if isinstance(n_periods, float)
                                else n_periods
                            ),
                            dc_component,
                            phd,
                            thd,
                            harmonics,
                            self.step_count - 1,
                        )
                        if signal in self.fourier:
                            self.fourier[signal].append(fourier_data)
                        else:
                            self.fourier[signal] = [fourier_data]

                elif line.startswith(".step"):
                    self.step_count += 1
                    tokens = line.strip("\r\n").split(" ")
                    for tok in tokens[1:]:
                        lhs, rhs = tok.split("=")
                        # Try to convert to int or float
                        converted_rhs = try_convert_value(rhs)
                        lhs = lhs.lower()
                        ll = self.stepset.get(lhs, None)
                        if ll:
                            ll.append(converted_rhs)
                        else:
                            self.stepset[lhs] = [converted_rhs]

                elif line.startswith("Measurement:"):
                    if not read_measures:
                        fin.close()
                        return
                    else:
                        break  # Jumps to the section that reads measurements

                if self.step_count == 0:  # then there are no steps,
                    match = regx.match(line)
                    if match:
                        # Get the data
                        dataname = match.group("name")
                        if match.group("from"):
                            headers = [dataname, dataname + "_FROM", dataname + "_TO"]
                            measure_values = [
                                match.group("value"),
                                match.group("from"),
                                match.group("to"),
                            ]
                        elif match.group("at"):
                            headers = [dataname, dataname + "_at"]
                            measure_values = [match.group("value"), match.group("at")]
                        else:
                            headers = [dataname]
                            measure_values = [match.group("value")]
                        self.measure_count += 1
                        for k, title in enumerate(headers):
                            self.dataset[title.lower()] = [
                                try_convert_value(measure_values[k])
                            ]  # need to be a list for compatibility
                line = fin.readline()

            meas_name: str | None = None

            headers: list[str] = []
            measurements: list[list[ValueType]] = []
            while line:
                line = line.strip("\r\n")
                if line.startswith("Measurement: "):
                    if meas_name:  # If previous measurement was saved
                        # store the info
                        if len(measurements):
                            _logger.debug(
                                "Storing Measurement %s (count %d)",
                                meas_name,
                                len(measurements),
                            )
                            self.measure_count += len(measurements)
                            for k, title in enumerate(headers):
                                lower_title = title.lower()
                                self.dataset[lower_title] = [
                                    measure[k] for measure in measurements
                                ]
                        headers = []
                        measurements = []
                    meas_name = line[
                        13:
                    ]  # text which is after "Measurement: ". len("Measurement: ") -> 13
                    _logger.debug(f"Reading Measurement {line[13:]}")
                else:
                    tokens = line.split("\t")
                    if len(tokens) >= 2:
                        try:
                            int(
                                tokens[0]
                            )  # This instruction only serves to trigger the exception
                            meas = tokens[1:]  # remove the first token
                            converted_measure = try_convert_value(
                                cast(list[ConvertibleValue], meas)
                            )
                            if isinstance(converted_measure, list):
                                measurements.append(converted_measure)
                                self.measure_count += 1
                            else:
                                measurements.append([converted_measure])
                                self.measure_count += 1
                        except ValueError:
                            if len(tokens) >= 3 and (
                                tokens[2] == "FROM" or tokens[2] == "at"
                            ) and meas_name is not None:
                                tokens[2] = meas_name + "_" + tokens[2]
                            if (
                                len(tokens) >= 4
                                and tokens[3] == "TO"
                                and meas_name is not None
                            ):
                                tokens[3] = meas_name + "_TO"
                            if meas_name is not None:
                                headers = [meas_name, *tokens[2:]]
                            else:
                                headers = list(tokens[2:])
                            measurements = []
                    else:
                        _logger.debug("->%s", line)

                line = fin.readline()  # advance to the next line

            # storing the last data into the dataset
            if meas_name:
                _logger.debug(
                    "Storing Measurement %s (count %d)", meas_name, len(measurements)
                )
            if len(measurements):
                self.measure_count += len(measurements)
                for k, title in enumerate(headers):
                    self.dataset[title.lower()] = [
                        measure[k] for measure in measurements
                    ]

            _logger.debug("%d measurements", len(self.dataset))
            _logger.info(
                "Identified %d steps, read %d measurements",
                self.step_count,
                self.measure_count,
            )

    def export_data(
        self,
        export_file: str | Path,
        encoding: str | None = None,
        append_with_line_prefix: str | None = None,
        value_separator: str = "\t",
        line_terminator: str = "\n",
    ) -> None:
        """Aside from exporting the data, it also exports fourier data if it exists."""
        super().export_data(
            export_file,
            encoding,
            append_with_line_prefix,
            value_separator,
            line_terminator,
        )

        fourier_export_file = os.path.splitext(export_file)[0] + "_fourier.txt"
        if self.fourier:
            with open(fourier_export_file, "w", encoding=encoding) as fout:
                if self.step_count > 0:
                    fout.write("\t".join(self.stepset.keys()) + "\t")
                fout.write(
                    "Signal\tN-Periods\tDC Component\tFundamental\tN-Harmonics\tPHD\tTHD\n"
                )
                for signal, analyses in self.fourier.items():
                    if self.step_count > 0:
                        for step_no in range(self.step_count):
                            step_values = [
                                f"{self.stepset[step][step_no]}"
                                for step in self.stepset
                            ]
                            for analysis in analyses:
                                if analysis.step == step_no:
                                    fout.write("\t".join(step_values) + "\t")
                                    if analysis.n_periods < 1:
                                        n_periods_str = "all"
                                    else:
                                        n_periods_str = str(analysis.n_periods)
                                    fout.write(
                                        f"{signal}\t"
                                        f"{n_periods_str}\t"
                                        f"{analysis.dc_component}\t"
                                        f"{analysis.fundamental}\t"
                                        f"{len(analysis)}\t"
                                        f"{analysis.phd}\t"
                                        f"{analysis.thd}\n"
                                    )
                    else:
                        for analysis in analyses:
                            if analysis.n_periods == -1:
                                n_periods_str = "all"
                            else:
                                n_periods_str = str(analysis.n_periods)
                            fout.write(
                                f"{signal}\t"
                                f"{n_periods_str}\t"
                                f"{analysis.dc_component}\t"
                                f"{analysis.fundamental}"
                                f"\t{len(analysis)}\t"
                                f"{analysis.phd}\t"
                                f"{analysis.thd}\n"
                            )
                fout.write("\n\nHarmonic Analysis\n")
                fout.write("\t".join(self.stepset.keys()) + "\t")
                fout.write(
                    "Signal\tN-Periods\tHarmonic\tFrequency\tFourier\t"
                    "Normalized\tPhase\tNormalized\n"
                )
                for signal, analyses in self.fourier.items():
                    for analysis in analyses:
                        if self.step_count > 0:
                            for step_no in range(self.step_count):
                                if analysis.step == step_no:
                                    step_values = [
                                        f"{self.stepset[step][step_no]}"
                                        for step in self.stepset
                                    ]
                                    for harmonic in analysis:
                                        fout.write("\t".join(step_values) + "\t")
                                        fout.write(
                                            f"{signal}\t"
                                            f"{analysis.n_periods}\t"
                                            f"{harmonic.harmonic_number}\t"
                                            f"{harmonic.frequency}\t"
                                            f"{harmonic.fourier_component}\t"
                                            f"{harmonic.normalized_component}\t"
                                            f"{harmonic.phase}\t"
                                            f"{harmonic.normalized_phase}\n"
                                        )
                        else:
                            for harmonic in analysis:
                                fout.write(
                                    f"{signal}\t"
                                    f"{analysis.n_periods}\t"
                                    f"{harmonic.harmonic_number}\t"
                                    f"{harmonic.frequency}\t"
                                    f"{harmonic.fourier_component}\t"
                                    f"{harmonic.normalized_component}\t"
                                    f"{harmonic.phase}\t"
                                    f"{harmonic.normalized_phase}\n"
                                )
                fout.write("\n")
